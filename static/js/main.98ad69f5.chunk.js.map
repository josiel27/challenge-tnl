{"version":3,"sources":["components/loading/Loading.js","components/gitRepositories/GitRepositories.js","components/searchForm/SearchForm.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Loading","props","value","className","GitRepositories","useState","repositories","setRepositories","loading","setLoading","visibleAlert","text","color","alertOptions","setAlertOptions","spanSelect","setSpanSelect","columnsTable","filter","orderAsc","filterSelect","setFilterSelect","url_fetch","nameRepositorie","useEffect","a","fetch","then","res","json","catch","error","alert","response","message","onShowAlert","filterOrderBy","loadRepositories","elements","filterName","numb","handleFilterOrderBy","sort","b","String","toUpperCase","changeSpanOrder","newFilterOrderBy","map","param","setTimeout","Alert","variant","show","Table","striped","hover","responsive","column","key","onClick","theadChange","repo","id","SearchForm","Form","onSubmit","e","handleSearchRepositories","Group","Label","Row","Col","sm","Control","name","type","placeholder","required","Button","App","setNameRepositorie","event","preventDefault","target","inputSearchText","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98ad69f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Loading.css\";\r\n\r\nconst Loading = props => {\r\n  return (\r\n    <>\r\n      {props.value ? (\r\n        <div className=\"loading\">\r\n          <div>{/*loader*/}</div>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Loading from \"../loading/Loading\";\r\nimport { Table, Alert } from \"react-bootstrap\";\r\nimport \"./GitRepositories.css\";\r\nimport { FaArrowDown, FaArrowUp } from 'react-icons/fa';\r\n\r\nconst GitRepositories = props => {\r\n  const [repositories, setRepositories] = useState([]);\r\n  const [loading, setLoading] = useState([false]);\r\n  const [alertOptions, setAlertOptions] = useState({ visibleAlert: false, text: '', color: 'info' });\r\n  const [spanSelect, setSpanSelect] = useState(<FaArrowDown />);\r\n  const [columnsTable] = useState(['name', 'private', 'html_url', 'description', 'language']);\r\n  const [filterSelect, setFilterSelect] = useState({\r\n    filter: \"name\",\r\n    orderAsc: true\r\n  });\r\n\r\n  const url_fetch = `https://api.github.com/users/${props.nameRepositorie}/repos`;//url para pegar o projeto na api\r\n\r\n  //Atualiza a tabela\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    async function loadRepositories() {\r\n      const response = await fetch(url_fetch)\r\n        .then(res => {\r\n          return res.json();\r\n        })\r\n        .catch(error => {\r\n          alert(`Erro: ${error}`);\r\n        });\r\n\r\n      //verifica se existe o usuario ou a conta nao tem projetos\r\n      (response.message == \"Not Found\") ? //verifica se existe o usuario\r\n        onShowAlert('warning', \"Conta do github não encontrada!\")\r\n        : //else\r\n        response == \"\" ? //verifica se o usuario tem projetos\r\n          // alert(\"Usuário não tem projetos!\")\r\n          onShowAlert('info', \"Conta não possui nenhum projeto!\")\r\n          : //else\r\n          setRepositories(filterOrderBy(response)); //adiciona os projetos na lista\r\n\r\n\r\n      //setando o retorno da funcao no state\r\n      setLoading(false);\r\n    }\r\n    //chamando funcao async para carregar os repositorio. Se o props estiver vazio, ela nao executa a funcao\r\n    props.nameRepositorie ? loadRepositories() : setLoading(false);\r\n  }, [props.nameRepositorie]); //toda vez que o nameRepositorie for alterado, ele atualiza a funcao useeffect\r\n\r\n\r\n\r\n  //Primeiro converte para string para o null evitar o toUpperCase funcionar e depois retorna a lista em ordem crescente\r\n  const filterOrderBy = elements => {\r\n    const filterName = filterSelect.filter;\r\n    let numb = 1;\r\n    handleFilterOrderBy() ? (numb = 1) : (numb = -1);\r\n    return elements.sort((a, b) =>\r\n      String(a[filterName]).toUpperCase() > String(b[filterName]).toUpperCase()\r\n        ? numb\r\n        : numb * -1\r\n    );\r\n  };\r\n\r\n  //escolhe qual a coluna será filtrada\r\n  const changeFilterOrderBy = theadChange => {\r\n    changeSpanOrder(theadChange); //chama a funcao para trocar o icone de ordenacao\r\n    setFilterSelect((filterSelect.filter = theadChange)); //diz quem e coluna de ordenacao selecionada\r\n    setRepositories(filterOrderBy(repositories)); //troca a ordenação do filtro;\r\n  };\r\n\r\n  //troca o icone de ordenacao ASC ou DESC\r\n  const changeSpanOrder = () => {\r\n    (filterSelect.orderAsc) ?\r\n      setSpanSelect(<FaArrowDown />)\r\n      :\r\n      setSpanSelect(<FaArrowUp />)\r\n  };\r\n\r\n  // troca o filtro para asc ou desc\r\n  const handleFilterOrderBy = () => {\r\n    const newFilterOrderBy = [filterSelect].map(param => {\r\n      return { ...param, orderAsc: !param.orderAsc };\r\n    });\r\n    setFilterSelect(newFilterOrderBy[0]);\r\n    return filterSelect.orderAsc;\r\n  };\r\n\r\n\r\n\r\n  //Mostrta o alert de sucesso durante 2seg, depois seta aos valores default\r\n  const onShowAlert = (color, text) => {\r\n    setAlertOptions({ visibleAlert: true, text, color });\r\n    setTimeout(() => {\r\n      setAlertOptions({ visibleAlert: false, text: '', color: 'info' })\r\n    }, 2000);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"alert-div\">\r\n        <Alert variant={alertOptions.color} show={alertOptions.visibleAlert} >\r\n          {alertOptions.text}\r\n        </Alert> {/* Component para exibir a mensagem de alert sucesso ou falha */}\r\n      </div>\r\n\r\n      {/* se o state repositories estiver preenchido, mostra o conteudo da tabela */}\r\n      {repositories != \"\" ? (\r\n        <>\r\n          <Loading value={loading} />\r\n          <Table striped hover responsive>\r\n            <thead>\r\n              <tr>\r\n                {/* Para cada item no state, carrega as colunas thead */}\r\n                {columnsTable.map(column => (\r\n                  <th key={column} onClick={() => changeFilterOrderBy(column)}>\r\n                    {column === 'name' ? 'Project' : null}  {/* Correcao nome da th */}\r\n                    {column === 'private' ? 'Private' : null} {/* Correcao nome da th */}\r\n                    {column === 'html_url' ? 'URL' : null} {/* Correcao nome da th */}\r\n                    {column === 'description' ? 'Description' : null}{/* Correcao nome da th */}\r\n                    {column === 'language' ? 'Language' : null} {/* Correcao nome da th */}\r\n                    {filterSelect.filter == column ? spanSelect : null}{/* ICONE DE ORDENACAO */}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* Para cada projeto, carrega as td na tabela com as colunas passadas no state */}\r\n              {repositories.map(repo => (\r\n                <tr key={repo.id}>\r\n                  {columnsTable.map(column => (\r\n                    <td key={column} id={column}>\r\n                      {/* private é um booleano, por isso a conversao em string */}\r\n                      {column === 'private' ? String(repo[column]) : repo[column]} \r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </>\r\n      ) : null}\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GitRepositories;\r\n","import React from \"react\";\r\nimport { Button, Form, Col } from \"react-bootstrap\";\r\nimport \"./SearchForm.css\";\r\nconst SearchForm = props => {\r\n  return (\r\n    <Form\r\n      onSubmit={e => {\r\n        props.handleSearchRepositories(e);\r\n      }}\r\n    >\r\n      <Form.Group>\r\n        <Form.Label>Search for a github user Account:</Form.Label>\r\n        <Form.Row>\r\n          <Col sm={3} className=\"inputSearchText\">\r\n            <Form.Control name=\"inputSearchText\" type=\"text\" placeholder=\"User Id\" required />\r\n          </Col>\r\n          <Col>\r\n            <Button type=\"submit\">SEARCH</Button>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport GitRepositories from \"../gitRepositories/GitRepositories\";\r\nimport SearchForm from \"../searchForm/SearchForm\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst App = () => {\r\n  const [nameRepositorie, setNameRepositorie] = useState('');\r\n\r\n  const handleSearchRepositories = (event, value) => {\r\n    event.preventDefault(); // Prevent submit from reloading the page\r\n    setNameRepositorie(event.target.inputSearchText.value); //Recebe o retorno do input de texto do form e seta no state\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <SearchForm handleSearchRepositories={handleSearchRepositories} />\r\n      <GitRepositories nameRepositorie={nameRepositorie} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}